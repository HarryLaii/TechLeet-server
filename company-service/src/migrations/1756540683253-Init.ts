import { MigrationInterface, QueryRunner } from "typeorm";

export class Init1756540683253 implements MigrationInterface {
    name = 'Init1756540683253'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "position" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, "isActive" boolean NOT NULL DEFAULT true, "notes" text, "positionId" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "positionName" character varying(100) NOT NULL, "description" text, "minSalary" numeric(10,2), "maxSalary" numeric(10,2), "level" integer DEFAULT '1', "positionCode" character varying(20), "requirements" text, "positionTypeId" integer, CONSTRAINT "UQ_de801dbb403716375a0fd1d31f2" UNIQUE ("positionName"), CONSTRAINT "PK_927edd2b828777f0052366195e3" PRIMARY KEY ("positionId")); COMMENT ON COLUMN "position"."createdAt" IS 'Record creation timestamp'; COMMENT ON COLUMN "position"."updatedAt" IS 'Record last update timestamp'; COMMENT ON COLUMN "position"."deletedAt" IS 'Soft delete timestamp'; COMMENT ON COLUMN "position"."isActive" IS 'Whether this record is active'; COMMENT ON COLUMN "position"."notes" IS 'Additional notes or comments'; COMMENT ON COLUMN "position"."positionId" IS 'Unique identifier for the position'; COMMENT ON COLUMN "position"."positionName" IS 'Name of the position'; COMMENT ON COLUMN "position"."description" IS 'Detailed description of position responsibilities'; COMMENT ON COLUMN "position"."minSalary" IS 'Minimum salary for this position'; COMMENT ON COLUMN "position"."maxSalary" IS 'Maximum salary for this position'; COMMENT ON COLUMN "position"."level" IS 'Position level (1=Entry, 2=Junior, 3=Senior, 4=Lead, 5=Manager)'; COMMENT ON COLUMN "position"."positionCode" IS 'Position code for internal reference'; COMMENT ON COLUMN "position"."requirements" IS 'Required skills and qualifications'; COMMENT ON COLUMN "position"."positionTypeId" IS 'Reference to position type'`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_de801dbb403716375a0fd1d31f" ON "position" ("positionName") `);
        await queryRunner.query(`CREATE TABLE "position_type" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, "isActive" boolean NOT NULL DEFAULT true, "notes" text, "positionTypeId" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "positionTypeName" character varying(100) NOT NULL, "description" text, "typeCode" character varying(20), "sortOrder" integer DEFAULT '0', "category" character varying(50), CONSTRAINT "UQ_a6f233eb73a664c9ab0754e77bf" UNIQUE ("positionTypeName"), CONSTRAINT "PK_f9886da82934b76f656816b84d3" PRIMARY KEY ("positionTypeId")); COMMENT ON COLUMN "position_type"."createdAt" IS 'Record creation timestamp'; COMMENT ON COLUMN "position_type"."updatedAt" IS 'Record last update timestamp'; COMMENT ON COLUMN "position_type"."deletedAt" IS 'Soft delete timestamp'; COMMENT ON COLUMN "position_type"."isActive" IS 'Whether this record is active'; COMMENT ON COLUMN "position_type"."notes" IS 'Additional notes or comments'; COMMENT ON COLUMN "position_type"."positionTypeId" IS 'Unique identifier for the position type'; COMMENT ON COLUMN "position_type"."positionTypeName" IS 'Name of the position type'; COMMENT ON COLUMN "position_type"."description" IS 'Description of the position type'; COMMENT ON COLUMN "position_type"."typeCode" IS 'Code for the position type'; COMMENT ON COLUMN "position_type"."sortOrder" IS 'Sort order for display purposes'; COMMENT ON COLUMN "position_type"."category" IS 'Category of position type (e.g., Technical, Management, Support)'`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_a6f233eb73a664c9ab0754e77b" ON "position_type" ("positionTypeName") `);
        await queryRunner.query(`CREATE TABLE "department_type" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, "isActive" boolean NOT NULL DEFAULT true, "notes" text, "departmentTypeId" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "departmentTypeName" character varying(100) NOT NULL, "description" text, "typeCode" character varying(20), "sortOrder" integer DEFAULT '0', CONSTRAINT "UQ_ef17263812143b03a3929bf2267" UNIQUE ("departmentTypeName"), CONSTRAINT "PK_3f3f3bcbed1c677e953f6131236" PRIMARY KEY ("departmentTypeId")); COMMENT ON COLUMN "department_type"."createdAt" IS 'Record creation timestamp'; COMMENT ON COLUMN "department_type"."updatedAt" IS 'Record last update timestamp'; COMMENT ON COLUMN "department_type"."deletedAt" IS 'Soft delete timestamp'; COMMENT ON COLUMN "department_type"."isActive" IS 'Whether this record is active'; COMMENT ON COLUMN "department_type"."notes" IS 'Additional notes or comments'; COMMENT ON COLUMN "department_type"."departmentTypeId" IS 'Unique identifier for the department type'; COMMENT ON COLUMN "department_type"."departmentTypeName" IS 'Name of the department type'; COMMENT ON COLUMN "department_type"."description" IS 'Description of the department type'; COMMENT ON COLUMN "department_type"."typeCode" IS 'Code for the department type'; COMMENT ON COLUMN "department_type"."sortOrder" IS 'Sort order for display purposes'`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_ef17263812143b03a3929bf226" ON "department_type" ("departmentTypeName") `);
        await queryRunner.query(`CREATE TABLE "department" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, "isActive" boolean NOT NULL DEFAULT true, "notes" text, "departmentId" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "departmentName" character varying(100) NOT NULL, "description" text, "budget" numeric(15,2), "departmentCode" character varying(50), "headquarterId" integer NOT NULL, "departmentTypeId" integer, "leaderId" integer, CONSTRAINT "PK_70f4ee821b30d15ea4e6beddc85" PRIMARY KEY ("departmentId")); COMMENT ON COLUMN "department"."createdAt" IS 'Record creation timestamp'; COMMENT ON COLUMN "department"."updatedAt" IS 'Record last update timestamp'; COMMENT ON COLUMN "department"."deletedAt" IS 'Soft delete timestamp'; COMMENT ON COLUMN "department"."isActive" IS 'Whether this record is active'; COMMENT ON COLUMN "department"."notes" IS 'Additional notes or comments'; COMMENT ON COLUMN "department"."departmentId" IS 'Unique identifier for the department'; COMMENT ON COLUMN "department"."departmentName" IS 'Name of the department'; COMMENT ON COLUMN "department"."description" IS 'Description of department responsibilities'; COMMENT ON COLUMN "department"."budget" IS 'Annual budget allocated to department'; COMMENT ON COLUMN "department"."departmentCode" IS 'Department code for internal reference'; COMMENT ON COLUMN "department"."headquarterId" IS 'Reference to headquarter this department belongs to'; COMMENT ON COLUMN "department"."departmentTypeId" IS 'Reference to department type'; COMMENT ON COLUMN "department"."leaderId" IS 'Reference to employee who leads this department'`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_df946ffdf6f4c8ee013b3a7126" ON "department" ("departmentName") `);
        await queryRunner.query(`CREATE TABLE "headquarter" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, "isActive" boolean NOT NULL DEFAULT true, "notes" text, "headquarterId" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "headquarterName" character varying(100) NOT NULL, "headquarterAddress" text NOT NULL, "headquarterPhone" character varying(20) NOT NULL, "headquarterEmail" character varying(100) NOT NULL, "city" character varying(50) NOT NULL, "postalCode" character varying(10), "description" text, "isMainHeadquarter" boolean NOT NULL DEFAULT false, CONSTRAINT "UQ_1b9ba2c7f8d1a487539e7c14452" UNIQUE ("headquarterName"), CONSTRAINT "UQ_c317d7801fd8c196d05d7409a03" UNIQUE ("headquarterEmail"), CONSTRAINT "PK_eef42eabb0258e6a3d0aea4a971" PRIMARY KEY ("headquarterId")); COMMENT ON COLUMN "headquarter"."createdAt" IS 'Record creation timestamp'; COMMENT ON COLUMN "headquarter"."updatedAt" IS 'Record last update timestamp'; COMMENT ON COLUMN "headquarter"."deletedAt" IS 'Soft delete timestamp'; COMMENT ON COLUMN "headquarter"."isActive" IS 'Whether this record is active'; COMMENT ON COLUMN "headquarter"."notes" IS 'Additional notes or comments'; COMMENT ON COLUMN "headquarter"."headquarterId" IS 'Unique identifier for the headquarter'; COMMENT ON COLUMN "headquarter"."headquarterName" IS 'Name of the headquarter or office'; COMMENT ON COLUMN "headquarter"."headquarterAddress" IS 'Physical address of the headquarter'; COMMENT ON COLUMN "headquarter"."headquarterPhone" IS 'Contact phone number'; COMMENT ON COLUMN "headquarter"."headquarterEmail" IS 'Contact email address'; COMMENT ON COLUMN "headquarter"."city" IS 'City where headquarter is located (Vietnam)'; COMMENT ON COLUMN "headquarter"."postalCode" IS 'Postal code'; COMMENT ON COLUMN "headquarter"."description" IS 'Additional description or notes about the location'; COMMENT ON COLUMN "headquarter"."isMainHeadquarter" IS 'Whether this is the main headquarters'`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_1b9ba2c7f8d1a487539e7c1445" ON "headquarter" ("headquarterName") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_c317d7801fd8c196d05d7409a0" ON "headquarter" ("headquarterEmail") `);
        await queryRunner.query(`ALTER TABLE "position" ADD CONSTRAINT "FK_21c3a9235bb513ed37d5b55e617" FOREIGN KEY ("positionTypeId") REFERENCES "position_type"("positionTypeId") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "department" ADD CONSTRAINT "FK_e42a6a0d7ad3651d801ee444ecd" FOREIGN KEY ("headquarterId") REFERENCES "headquarter"("headquarterId") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "department" ADD CONSTRAINT "FK_117b2b6099c401581bf8c0399b4" FOREIGN KEY ("departmentTypeId") REFERENCES "department_type"("departmentTypeId") ON DELETE SET NULL ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "department" DROP CONSTRAINT "FK_117b2b6099c401581bf8c0399b4"`);
        await queryRunner.query(`ALTER TABLE "department" DROP CONSTRAINT "FK_e42a6a0d7ad3651d801ee444ecd"`);
        await queryRunner.query(`ALTER TABLE "position" DROP CONSTRAINT "FK_21c3a9235bb513ed37d5b55e617"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_c317d7801fd8c196d05d7409a0"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_1b9ba2c7f8d1a487539e7c1445"`);
        await queryRunner.query(`DROP TABLE "headquarter"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_df946ffdf6f4c8ee013b3a7126"`);
        await queryRunner.query(`DROP TABLE "department"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_ef17263812143b03a3929bf226"`);
        await queryRunner.query(`DROP TABLE "department_type"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_a6f233eb73a664c9ab0754e77b"`);
        await queryRunner.query(`DROP TABLE "position_type"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_de801dbb403716375a0fd1d31f"`);
        await queryRunner.query(`DROP TABLE "position"`);
    }

}
