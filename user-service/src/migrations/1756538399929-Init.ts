import { MigrationInterface, QueryRunner } from "typeorm";

export class Init1756538399929 implements MigrationInterface {
    name = 'Init1756538399929'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "employee" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, "isActive" boolean NOT NULL DEFAULT true, "notes" text, "employeeId" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "employeeCode" character varying(20), "firstName" character varying NOT NULL, "lastName" character varying NOT NULL, "address" text, "birthDate" date, "test" character varying NOT NULL, "email" character varying NOT NULL, "password" character varying(255), "gender" boolean, "startDate" date, "confirmationDate" date, "avatarUrl" character varying(255), "phoneNumber" character varying(20), "baseSalary" numeric(10,2), "departmentId" integer, "positionId" integer, "managerId" integer, "status" character varying(20), "terminationDate" date, "terminationReason" text, CONSTRAINT "UQ_ba530b40997eb343658691d26cc" UNIQUE ("employeeCode"), CONSTRAINT "UQ_817d1d427138772d47eca048855" UNIQUE ("email"), CONSTRAINT "PK_cd21151b14974c7a24e8c24df28" PRIMARY KEY ("employeeId")); COMMENT ON COLUMN "employee"."createdAt" IS 'Record creation timestamp'; COMMENT ON COLUMN "employee"."updatedAt" IS 'Record last update timestamp'; COMMENT ON COLUMN "employee"."deletedAt" IS 'Soft delete timestamp'; COMMENT ON COLUMN "employee"."isActive" IS 'Whether this record is active'; COMMENT ON COLUMN "employee"."notes" IS 'Additional notes or comments'; COMMENT ON COLUMN "employee"."employeeId" IS 'Unique identifier for the employee'; COMMENT ON COLUMN "employee"."employeeCode" IS 'Unique employee code for identification'; COMMENT ON COLUMN "employee"."firstName" IS 'Employee first name'; COMMENT ON COLUMN "employee"."lastName" IS 'Employee last name'; COMMENT ON COLUMN "employee"."address" IS 'Employee residential address'; COMMENT ON COLUMN "employee"."birthDate" IS 'Employee date of birth'; COMMENT ON COLUMN "employee"."email" IS 'Employee email address'; COMMENT ON COLUMN "employee"."password" IS 'Encrypted password for authentication'; COMMENT ON COLUMN "employee"."gender" IS 'Employee gender (true=male, false=female)'; COMMENT ON COLUMN "employee"."startDate" IS 'Employee start date'; COMMENT ON COLUMN "employee"."confirmationDate" IS 'Date when employee was confirmed'; COMMENT ON COLUMN "employee"."avatarUrl" IS 'URL to employee avatar image'; COMMENT ON COLUMN "employee"."phoneNumber" IS 'Employee phone number'; COMMENT ON COLUMN "employee"."baseSalary" IS 'Employee base salary'; COMMENT ON COLUMN "employee"."departmentId" IS 'Reference to department (Company Service)'; COMMENT ON COLUMN "employee"."positionId" IS 'Reference to position (Company Service)'; COMMENT ON COLUMN "employee"."managerId" IS 'Reference to manager employee'; COMMENT ON COLUMN "employee"."status" IS 'Employee status (active, inactive, terminated, etc.)'; COMMENT ON COLUMN "employee"."terminationDate" IS 'Date when employee was terminated'; COMMENT ON COLUMN "employee"."terminationReason" IS 'Reason for termination'`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_ba530b40997eb343658691d26c" ON "employee" ("employeeCode") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_817d1d427138772d47eca04885" ON "employee" ("email") `);
        await queryRunner.query(`CREATE TYPE "public"."permission_permissiontype_enum" AS ENUM('EDIT', 'VIEW', 'FULL')`);
        await queryRunner.query(`CREATE TABLE "permission" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, "isActive" boolean NOT NULL DEFAULT true, "notes" text, "permissionId" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "permissionName" character varying(100), "permissionType" "public"."permission_permissiontype_enum" NOT NULL DEFAULT 'VIEW', "description" text, "resource" character varying(50), "action" character varying(50), "category" character varying(50), "departmentId" integer, "headquarterId" integer, CONSTRAINT "UQ_d89e1dadfa403bfefa4d49f7ecf" UNIQUE ("permissionName"), CONSTRAINT "PK_86b314be9c1be5c62b3a9d97ae4" PRIMARY KEY ("permissionId")); COMMENT ON COLUMN "permission"."createdAt" IS 'Record creation timestamp'; COMMENT ON COLUMN "permission"."updatedAt" IS 'Record last update timestamp'; COMMENT ON COLUMN "permission"."deletedAt" IS 'Soft delete timestamp'; COMMENT ON COLUMN "permission"."isActive" IS 'Whether this record is active'; COMMENT ON COLUMN "permission"."notes" IS 'Additional notes or comments'; COMMENT ON COLUMN "permission"."permissionId" IS 'Unique identifier for the permission'; COMMENT ON COLUMN "permission"."permissionName" IS 'Name of the permission'; COMMENT ON COLUMN "permission"."permissionType" IS 'Type of permission'; COMMENT ON COLUMN "permission"."description" IS 'Description of what this permission allows'; COMMENT ON COLUMN "permission"."resource" IS 'Resource this permission applies to'; COMMENT ON COLUMN "permission"."action" IS 'Action this permission allows (create, read, update, delete)'; COMMENT ON COLUMN "permission"."category" IS 'Category or module this permission belongs to'; COMMENT ON COLUMN "permission"."departmentId" IS 'Reference to department (Company Service) - null means all departments'; COMMENT ON COLUMN "permission"."headquarterId" IS 'Reference to headquarter (Company Service) - null means all headquarters'`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_d89e1dadfa403bfefa4d49f7ec" ON "permission" ("permissionName") `);
        await queryRunner.query(`CREATE TABLE "session" ("sessionId" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "refreshToken" character varying, "employeeId" character varying, CONSTRAINT "PK_6f8fc3d2111ccc30d98e173d8dd" PRIMARY KEY ("sessionId"))`);
        await queryRunner.query(`CREATE TABLE "employee_permissions" ("employeeId" integer NOT NULL, "permissionId" integer NOT NULL, CONSTRAINT "PK_4a440b070a8968eb98e2a869b7b" PRIMARY KEY ("employeeId", "permissionId"))`);
        await queryRunner.query(`CREATE INDEX "IDX_3422b2e1aa6aa081b478ec4f44" ON "employee_permissions" ("employeeId") `);
        await queryRunner.query(`CREATE INDEX "IDX_49b8b896e2939688c3e35dda09" ON "employee_permissions" ("permissionId") `);
        await queryRunner.query(`ALTER TABLE "employee_permissions" ADD CONSTRAINT "FK_3422b2e1aa6aa081b478ec4f440" FOREIGN KEY ("employeeId") REFERENCES "employee"("employeeId") ON DELETE CASCADE ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE "employee_permissions" ADD CONSTRAINT "FK_49b8b896e2939688c3e35dda092" FOREIGN KEY ("permissionId") REFERENCES "permission"("permissionId") ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "employee_permissions" DROP CONSTRAINT "FK_49b8b896e2939688c3e35dda092"`);
        await queryRunner.query(`ALTER TABLE "employee_permissions" DROP CONSTRAINT "FK_3422b2e1aa6aa081b478ec4f440"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_49b8b896e2939688c3e35dda09"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_3422b2e1aa6aa081b478ec4f44"`);
        await queryRunner.query(`DROP TABLE "employee_permissions"`);
        await queryRunner.query(`DROP TABLE "session"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_d89e1dadfa403bfefa4d49f7ec"`);
        await queryRunner.query(`DROP TABLE "permission"`);
        await queryRunner.query(`DROP TYPE "public"."permission_permissiontype_enum"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_817d1d427138772d47eca04885"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_ba530b40997eb343658691d26c"`);
        await queryRunner.query(`DROP TABLE "employee"`);
    }

}
